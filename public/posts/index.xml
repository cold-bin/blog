<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 阿冰的小屋</title>
        <link>https://blog.coldbin.top/posts/</link>
        <description>All Posts | 阿冰的小屋</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>cold-bin@qq.com (阿冰)</managingEditor>
            <webMaster>cold-bin@qq.com (阿冰)</webMaster><copyright>本博客内容仅供教育和信息分享，不对准确性和完整性做保证，使用需谨慎。未经允许，禁止复制或商业使用。外部链接概不负责。随时可能更新，使用本博客默认遵循免责声明</copyright><lastBuildDate>Thu, 28 Dec 2023 19:17:08 &#43;0800</lastBuildDate><atom:link href="https://blog.coldbin.top/posts/" rel="self" type="application/rss+xml" /><item>
    <title>折腾小记 2023 12 28</title>
    <link>https://blog.coldbin.top/%E6%8A%98%E8%85%BE%E5%B0%8F%E8%AE%B0-2023-12-28/</link>
    <pubDate>Thu, 28 Dec 2023 19:17:08 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/%E6%8A%98%E8%85%BE%E5%B0%8F%E8%AE%B0-2023-12-28/</guid>
    <description><![CDATA[<p>使用github action构建自动交付与持续集成，algolia构建全文搜索引擎</p>]]></description>
</item><item>
    <title>Go语言设计与实现之栈内存管理</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Mon, 30 Oct 2023 15:10:39 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[go的栈内存栈内存与堆内存不一样，一般GC扫描的对象属于堆区，局部变量、函数参数等都分配到栈内存，而全局变量等会分配到堆区。 那么栈内存并不由]]></description>
</item><item>
    <title>Go语言设计与实现之垃圾回收</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:52 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
    <description><![CDATA[go的GCGC主要作用于堆区。 相比于C、C++等语言手动管理内存机制，go具备GC机制。GC的意思是垃圾回收，用以回收不再使用的内存空间。G]]></description>
</item><item>
    <title>Go语言设计与实现之内存分配器</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:36 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</guid>
    <description><![CDATA[go内存分配器程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的]]></description>
</item><item>
    <title>Go语言设计与实现之调度器</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:26 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
    <description><![CDATA[go线程调度器 抢占式调度器go语言调度器的发展历程经过好几个版本，目前的实现是基于信号的抢占式调度器。go语言是在用户空间实现的协程调度器，]]></description>
</item><item>
    <title>Go语言设计与实现之基础数据结构</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <pubDate>Fri, 27 Oct 2023 22:55:23 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[<p>这里介绍一些关于go语言底层数据结构的原理与实现，如\slice\array\channel\map\string</p>]]></description>
</item><item>
    <title>Go设计模式之桥接模式</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 02 Sep 2023 11:27:02 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[桥接模式一个类存在多个独立变化维度，我们通过组合的方式让多个维度可以独立进行扩展。桥接模式的目的是将抽象部分与实现部分解耦，使它们可以独立地]]></description>
</item><item>
    <title>Go设计模式之代理模式</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 01 Sep 2023 11:51:13 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[代理模式 单例模式、工厂模式、建造者模式、原型模式、函数选项模式都是属于创建型模式，指导如何创建对象。 而结构型模式主要指导如何将对象或类组合在]]></description>
</item><item>
    <title>Go设计模式之原型模式</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 31 Aug 2023 16:40:50 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[原型模式如果对象创建成本比较大（有些字段赋值可能需要rpc、网络、磁盘读取等），而且同一个类的对象差异不大（大部分字段都相同）。在这种情况下]]></description>
</item><item>
    <title>Go设计模式之函数选项模式</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%87%BD%E6%95%B0%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 30 Aug 2023 15:28:21 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%87%BD%E6%95%B0%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[来源于topgoer 函数选项模式 默认值有时候一个函数会有很多参数，为了方便函数的使用，我们会给希望给一些参数设定默认值，调用时只需要传与默认]]></description>
</item><item>
    <title>Go设计模式之建造者模式</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 30 Aug 2023 14:24:59 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[建造者模式与工厂模式不同，建造者模式只创建一种类型的复杂对象，可以通过设置可选参数，定制化地创建不同对象。 简而言之，创建参数复杂的对象 应用场]]></description>
</item><item>
    <title>Go语言设计模式之工厂模式</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 28 Aug 2023 17:01:59 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式与单例模式不同，工厂模式根据传入参数不同，会创建出不同的但是相关联的对象，由给定参数来决定是哪一种对象。像一个工厂一样，传入什么，生]]></description>
</item><item>
    <title>Go语言设计模式之单例模式</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 28 Aug 2023 15:45:16 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 简而言之：一个类只允许创建一个对象或示例。 饿汉式项目初始化的时候加载并初始化对象。创建过程线程安全，而且使得问题尽早暴露。 1 2 3 4 5]]></description>
</item><item>
    <title>Go设计模式之设计原则</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link>
    <pubDate>Mon, 28 Aug 2023 08:35:47 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid>
    <description><![CDATA[设计原则 SOLID原则 SRP、OCP、LSP、ISP、DIP KISS原则 YAGNI原则 DRY原则 LOD原则 SRP单一职责原则（Single Responsibility]]></description>
</item><item>
    <title>Go设计模式之OOP</title>
    <link>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8Boop/</link>
    <pubDate>Sun, 27 Aug 2023 15:48:31 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8Boop/</guid>
    <description><![CDATA[OOPOOP指的就是面向对象编程。有三大特性：封装、继承和多态 封装：通过对象访问控制权限实现，只对外暴露必要的方法修改对象，不能直接将对象全]]></description>
</item><item>
    <title>记一次github图床上传异常的bug</title>
    <link>https://blog.coldbin.top/%E8%AE%B0%E4%B8%80%E6%AC%A1github%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8%E7%9A%84bug/</link>
    <pubDate>Tue, 22 Aug 2023 15:35:04 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/%E8%AE%B0%E4%B8%80%E6%AC%A1github%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8%E7%9A%84bug/</guid>
    <description><![CDATA[记一次picgo+github图床上传失败的过程 问题这次遇到一个非常非常奇怪的问题。我和往常一样使用picgo在github上上传图片。但是]]></description>
</item><item>
    <title>Mit6.824之lab1</title>
    <link>https://blog.coldbin.top/mit6.824%E4%B9%8Blab1/</link>
    <pubDate>Thu, 10 Aug 2023 16:32:37 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/mit6.824%E4%B9%8Blab1/</guid>
    <description><![CDATA[lab1——实现简易版的mapreduce框架 论文回顾 mapreduce架构严格来讲，MapReduce是一种分布式计算模型，用于解决大于1]]></description>
</item><item>
    <title>Cs144 Lab</title>
    <link>https://blog.coldbin.top/cs144-lab/</link>
    <pubDate>Mon, 31 Jul 2023 19:13:59 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/cs144-lab/</guid>
    <description><![CDATA[<p>cs144 lab的思路与实现</p>]]></description>
</item><item>
    <title>计算机网络之网络安全</title>
    <link>https://blog.coldbin.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link>
    <pubDate>Thu, 13 Jul 2023 21:15:36 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</guid>
    <description><![CDATA[[toc] 一、网络攻击的类型网络攻击分为两大类：被动攻击和主动攻击。 截获：从网络上窃听他人的通信内容，但不干扰原报文在源端和目的端的传送。 篡改：捕获]]></description>
</item><item>
    <title>计算机网络之应用层</title>
    <link>https://blog.coldbin.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E5%BA%94%E7%94%A8%E5%B1%82/</link>
    <pubDate>Thu, 13 Jul 2023 13:52:13 &#43;0800</pubDate><author>
        <name>阿冰</name>
    </author><guid>https://blog.coldbin.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E5%BA%94%E7%94%A8%E5%B1%82/</guid>
    <description><![CDATA[[toc] 应用层 应用层协议原理 应用程序架构应用层程序的体系结构一般包括：P2P、CS这两种架构。 P2P：P2P（Peer-to-Peer）是一种分布]]></description>
</item></channel>
</rss>
