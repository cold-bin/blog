<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - Category - 阿冰的小屋</title>
        <link>https://blog.coldbin.top/categories/golang/</link>
        <description>golang - Category - 阿冰的小屋</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>cold-bin@qq.com (阿冰)</managingEditor>
            <webMaster>cold-bin@qq.com (阿冰)</webMaster><copyright>本博客内容仅供教育和信息分享，不对准确性和完整性做保证，使用需谨慎。未经允许，禁止复制或商业使用。外部链接概不负责。随时可能更新，使用本博客默认遵循免责声明</copyright><lastBuildDate>Mon, 30 Oct 2023 15:10:39 &#43;0800</lastBuildDate><atom:link href="https://blog.coldbin.top/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Go语言设计与实现之栈内存管理</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Mon, 30 Oct 2023 15:10:39 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[go的栈内存 栈内存与堆内存不一样，一般GC扫描的对象属于堆区，局部变量、函数参数等都分配到栈内存，而全局变量等会分配到堆区。 那么栈内存并不由]]></description>
</item>
<item>
    <title>Go语言设计与实现之垃圾回收</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:52 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
    <description><![CDATA[go的GC GC主要作用于堆区。 相比于C、C++等语言手动管理内存机制，go具备GC机制。GC的意思是垃圾回收，用以回收不再使用的内存空间。G]]></description>
</item>
<item>
    <title>Go语言设计与实现之内存分配器</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:36 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</guid>
    <description><![CDATA[go内存分配器 程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域：栈区（Stack）和堆区（Heap）。函数调用的]]></description>
</item>
<item>
    <title>Go语言设计与实现之调度器</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
    <pubDate>Sun, 29 Oct 2023 15:09:26 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
    <description><![CDATA[go线程调度器 抢占式调度器 go语言调度器的发展历程经过好几个版本，目前的实现是基于信号的抢占式调度器。go语言是在用户空间实现的协程调度器，]]></description>
</item>
<item>
    <title>Go语言设计与实现之基础数据结构</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <pubDate>Fri, 27 Oct 2023 22:55:23 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
    <description><![CDATA[<p>这里介绍一些关于go语言底层数据结构的原理与实现，如\slice\array\channel\map\string</p>]]></description>
</item>
<item>
    <title>Mod和gopath依赖管理</title>
    <link>https://blog.coldbin.top/mod%E5%92%8Cgopath%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</link>
    <pubDate>Mon, 09 Jan 2023 10:33:48 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/mod%E5%92%8Cgopath%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[彻底搞懂GOROOT、GOPATH、PATH、mod管理和gopath管理项目的区别 1、GOPATH 和 GOROOT 不同于其他语言，go中没有项目的说法]]></description>
</item>
<item>
    <title>并发安全之原子操作</title>
    <link>https://blog.coldbin.top/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Wed, 09 Nov 2022 16:24:28 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[[toc] 原子操作 并发是业务开发中经常要面对的问题，很多时候我们会直接用一把 sync.Mutex 互斥锁来线性化处理，保证每一时刻进入临界区的 goroutine 只有一个。这样避免了并发]]></description>
</item>
<item>
    <title>Sync.Pool的使用及源码分析</title>
    <link>https://blog.coldbin.top/sync.pool%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <pubDate>Sat, 24 Sep 2022 15:09:27 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/sync.pool%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[sync.Pool使用及源码浅析 sync.Pool使用 背景 “频繁创建对象，频繁销毁对象”是在项目开发里算比较常见。sync.Pool的出现就]]></description>
</item>
<item>
    <title>Go语言reflect包的使用</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80reflect%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Fri, 02 Sep 2022 19:26:22 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80reflect%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[Go语言reflect包的使用 反射包使用 map and slice 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func MapAndSlice() { stringSlice := make([]string,0) stringMap := make(map[string]string) sliceType := reflect.TypeOf(stringSlice) mapType := reflect.TypeOf(stringMap) rMap := reflect.MakeMap(mapType) rSlice := reflect.MakeSlice(sliceType,0,0) k := &#34;first&#34; rMap.SetMapIndex(reflect.ValueOf(k),reflect.ValueOf(&#34;test&#34;)) i :=]]></description>
</item>
<item>
    <title>Go语言unsafe包的使用</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80unsafe%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Sun, 28 Aug 2022 14:18:10 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80unsafe%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[unsafe使用及底层 unsafe实现原理 在使用之前我们先来看一下unsafe包的源码部分，标准库unsafe包中只提供了3种方法，分别是:]]></description>
</item>
<item>
    <title>Go的结构体内存对齐</title>
    <link>https://blog.coldbin.top/go%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
    <pubDate>Sun, 17 Jul 2022 15:26:09 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
    <description><![CDATA[一. 什么是内存对齐, 为啥要内存对齐？ 在解释什么是内存对齐之前，我们需要先了解一下CPU和内存数据交互的过程。CPU和内存是通过总线进行数据交]]></description>
</item>
<item>
    <title>Makefile在go项目的实践</title>
    <link>https://blog.coldbin.top/makefile%E5%9C%A8go%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Sat, 16 Jul 2022 22:13:26 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/makefile%E5%9C%A8go%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Make介绍 make命令是GNU的工程化编译工具，用以实现工程化的管理，提高开发效率。 Make解释Makefile 中的指令（应该说是规则）。]]></description>
</item>
<item>
    <title>Go语言标准库flag基本使用</title>
    <link>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93flag%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Sat, 16 Jul 2022 14:03:46 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93flag%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。 os.Args 如果你只是简单的想要获取命令行参数，可以像下面的代码]]></description>
</item>
<item>
    <title>Https在golang的实践</title>
    <link>https://blog.coldbin.top/https%E5%9C%A8golang%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Sat, 16 Jul 2022 11:03:31 &#43;0800</pubDate>
    <author>阿冰</author>
    <guid>https://blog.coldbin.top/https%E5%9C%A8golang%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[Golang创建最简单的HTTP和HTTPS服务 HTTP服务 HTTP是基于传输层TCP协议的。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &#34;net/http&#34; &#34;fmt&#34; &#34;log&#34; ) func]]></description>
</item>
</channel>
</rss>
